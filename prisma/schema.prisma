generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Product       Product[]
  Recipe        Recipe[]
  Section       Section[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Section {
  id      String    @id @default(cuid())
  title   String
  userId  String?
  Product Product[]
  User    User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_section_user")

  @@index([userId], map: "idx_section_userid")
}

model Product {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  updateddAt      DateTime          @updatedAt
  title           String
  checkStock      Boolean           @default(false)
  sectionId       String?
  userId          String?
  section         Section?          @relation(fields: [sectionId], references: [id])
  User            User?             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_user")
  RecipeRelations RecipeRelations[]

  @@index([userId], map: "idx_product_userid")
}

model RecipeRelations {
  recipeId  String
  productId String
  product   Product @relation(fields: [productId], references: [id])
  recipe    Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@id([recipeId, productId])
}

model Recipe {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  updateddAt      DateTime          @updatedAt
  title           String
  userId          String?
  User            User?             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_recipe_user")
  RecipeRelations RecipeRelations[]

  @@index([userId], map: "idx_recipe_userid")
}
